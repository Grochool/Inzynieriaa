
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

import com.itextpdf.awt.DefaultFontMapper;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

/**
 *
 * @author Przemek und Nitas
 * 
 */
public class GUI extends javax.swing.JFrame implements ActionListener {

	static PdfPTable table;

	/**
	 * Creates new form GUI
	 */
	public GUI() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		Imie = new javax.swing.JTextField();
		Naziwsko = new javax.swing.JTextField();
		Œrednia = new javax.swing.JTextField();
		Klasa = new javax.swing.JTextField();
		Profil = new javax.swing.JTextField();
		WykresSlupkowy = new javax.swing.JCheckBox();
		WykresKolowy = new javax.swing.JCheckBox();
		Tabela = new javax.swing.JCheckBox();
		Dodaj = new javax.swing.JButton();
		Generuj = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
		jLabel1.setText("Liceum Ogólnokszta³cz¹ce");

		jLabel2.setText("Imie");

		jLabel3.setText("Nazwisko");

		jLabel4.setText("Œrednia");

		jLabel5.setText("Klasa");

		jLabel6.setText("Profil");

		WykresSlupkowy.setText("Wykres s³upkowy");

		WykresKolowy.setText("Wykres ko³owy");

		Tabela.setText("Tabela");

		Dodaj.setText("Dodaj");
		Dodaj.addActionListener(this);

		Generuj.setText("Generuj");
		Generuj.addActionListener(this);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addGap(23, 23, 23)
						.addGroup(layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jLabel4).addComponent(jLabel2).addComponent(jLabel3)
										.addComponent(jLabel5))
								.addGroup(layout.createSequentialGroup().addGap(30, 30, 30).addComponent(jLabel6)))
						.addGap(35, 35, 35)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(Profil, javax.swing.GroupLayout.PREFERRED_SIZE, 135,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, Short.MAX_VALUE))
								.addGroup(layout.createSequentialGroup().addGroup(layout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(Imie, javax.swing.GroupLayout.DEFAULT_SIZE, 135,
														Short.MAX_VALUE)
												.addComponent(Naziwsko).addComponent(Œrednia).addComponent(Klasa))
										.addGroup(
												layout.createSequentialGroup().addGap(12, 12, 12).addComponent(Dodaj)))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(WykresSlupkowy,
														javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(Tabela, javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(WykresKolowy, javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(Generuj, javax.swing.GroupLayout.Alignment.TRAILING)))
								.addGroup(layout.createSequentialGroup().addGap(0, 11, Short.MAX_VALUE).addComponent(
										jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 362,
										javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(46, 46, 46)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(31, 31, 31).addComponent(jLabel1).addGap(54, 54, 54)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2)
						.addComponent(Imie, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(WykresSlupkowy))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3)
						.addComponent(Naziwsko, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(WykresKolowy).addGap(41, 41, 41)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(Tabela)
								.addComponent(Klasa, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel5)))
						.addGroup(layout.createSequentialGroup().addGap(27, 27, 27).addGroup(layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel4)
								.addComponent(Œrednia, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
				.addGap(18, 18, 18)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel6)
						.addComponent(Profil, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(Generuj)
						.addComponent(Dodaj))
				.addGap(53, 53, 53)));

		pack();
	}// </editor-fold>

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton Dodaj;
	private javax.swing.JButton Generuj;
	private javax.swing.JTextField Imie;
	private javax.swing.JTextField Klasa;
	private javax.swing.JTextField Naziwsko;
	private javax.swing.JTextField Profil;
	private javax.swing.JCheckBox Tabela;
	private javax.swing.JCheckBox WykresKolowy;
	private javax.swing.JCheckBox WykresSlupkowy;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JTextField Œrednia;

	// End of variables declaration
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Object sorc = e.getSource();
		if (sorc == Generuj) {
			if (Tabela.isSelected() == false && WykresKolowy.isSelected() == false
					&& WykresSlupkowy.isSelected() == false) {
				JOptionPane.showMessageDialog(null, "Zaznacz jakaœ opcje!!! ");
			} else {
				Document document = new Document();
				PdfWriter writer = null;
				try {
					writer = PdfWriter.getInstance(document,
							new FileOutputStream("C:\\Users\\komputer\\Desktop\\sample1.pdf"));
				} catch (FileNotFoundException e1) {
					// writer=TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (DocumentException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				document.open();
				if (Tabela.isSelected() == true) {

					try {
						document.add(makeTable());
					} catch (DocumentException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					System.out.println("xDDDD");
				}
				document.close(); // if tabela
				if (WykresKolowy.isSelected() == true) {
					writeChartToPDF(generatePieChart(), 400, 300, "C:\\Users\\komputer\\Desktop\\sample2.pdf");
				}

				if (WykresSlupkowy.isSelected() == true) {
					writeChartToPDF(generateBarChart(), 400, 300, "C:\\Users\\komputer\\Desktop\\sample3.pdf");
				}
				JOptionPane.showMessageDialog(null, "Plik/i zapisane/y na pulpicie! ");

			} //// else
		} /// sorc==
		if (sorc == Dodaj) {
			String name = Imie.getText();
			String nazwisko = Naziwsko.getText();
			String srednia = Œrednia.getText();
			String klasa = Klasa.getText();
			String profil = Profil.getText();
			if (checkName(name) == true && checkName(nazwisko) == true && checkKlasa(klasa) == true
					&& checkProfil(profil) == true) {
				Connection con;
				try {
					Class.forName("com.mysql.jdbc.Driver"); // (1)
					con = DriverManager.getConnection(
							"jdbc:mysql://localhost/wariat?user=root&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC");
					String query = " insert into liceum (IMIE, NAZWISKO, OCENA_SREDNIA, KLASA, PROFIL)"
							+ " values (?, ?, ?, ?, ?)";
					PreparedStatement preparedStmt = con.prepareStatement(query);
					preparedStmt.setString(1, name);
					preparedStmt.setString(2, nazwisko);
					preparedStmt.setDouble(3, Double.parseDouble(srednia));
					preparedStmt.setString(4, klasa);
					preparedStmt.setString(5, profil);

					preparedStmt.execute();

					con.close();

				} catch (Exception a) {

				}
			} else {
				JOptionPane.showMessageDialog(null, "Zle wprowadzone dane!! ");

			} // else
		}

	}

	public PdfPTable makeTable() {
		Connection con;
		ResultSet rs1;
		Statement st;
		PreparedStatement pst;

		String[] columnNames = { "Imie", "Nazwisko", "Srednia", "Klasa", "Profil" };

		try {
			Class.forName("com.mysql.jdbc.Driver"); // (1)
			con = DriverManager.getConnection(
					"jdbc:mysql://localhost/wariat?user=root&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"); // (2)
			st = con.createStatement();

			table = new PdfPTable(5);
			table.addCell(columnNames[0]);
			table.addCell(columnNames[1]);
			table.addCell(columnNames[2]);
			table.addCell(columnNames[3]);
			table.addCell(columnNames[4]);

			String uname = "";
			String lastname = "";
			String srednia = "";
			String klasa = "";
			String profil = "";

			try {
				pst = con.prepareStatement("select * from liceum");
				ResultSet rs = pst.executeQuery();
				int i = 0;
				while (rs.next()) {
					uname = rs.getString(2);
					lastname = rs.getString(3);
					srednia = rs.getString(4);
					klasa = rs.getString(5);
					profil = rs.getString(6);
					table.addCell(uname);
					table.addCell(lastname);
					table.addCell(srednia);
					table.addCell(klasa);
					table.addCell(profil);
					i++;
				}
				con.close();

			} catch (Exception e) {

			}

		} catch (Exception e) {

		}

		return table;
	}

	public JFreeChart generatePieChart() {
		Connection con;
		Statement st, st2, st3, st4, st5;
		PreparedStatement pst, pst2, pst3, pst4, pst5;
		DefaultPieDataset dataSet = new DefaultPieDataset();
		try {
			Class.forName("com.mysql.jdbc.Driver"); // (1)
			con = DriverManager.getConnection(
					"jdbc:mysql://localhost/wariat?user=root&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"); // (2)

			st = con.createStatement();
			pst = con.prepareStatement("select * from liceum where OCENA_SREDNIA < 2");
			ResultSet rs = pst.executeQuery();
			int i = 0;
			while (rs.next()) {
				i++;
			}
			dataSet.setValue("<2", i);
			st2 = con.createStatement();
			pst2 = con.prepareStatement("select * from liceum where OCENA_SREDNIA >=2 AND OCENA_SREDNIA <3");
			ResultSet rs2 = pst2.executeQuery();
			int j = 0;
			while (rs2.next()) {
				j++;
			}
			dataSet.setValue("2-3", j);

			////////////
			st3 = con.createStatement();
			pst3 = con.prepareStatement("select * from liceum where OCENA_SREDNIA >=3 AND OCENA_SREDNIA <4");
			ResultSet rs3 = pst3.executeQuery();
			int k = 0;
			while (rs3.next()) {
				k++;
			}
			dataSet.setValue("3-4", k);

			st4 = con.createStatement();
			pst4 = con.prepareStatement("select * from liceum where OCENA_SREDNIA >=4 AND OCENA_SREDNIA <5");
			ResultSet rs4 = pst4.executeQuery();
			int l = 0;
			while (rs4.next()) {
				l++;
			}
			dataSet.setValue("4-5", k);

			st5 = con.createStatement();
			pst5 = con.prepareStatement("select * from liceum where OCENA_SREDNIA >=5");
			ResultSet rs5 = pst.executeQuery();
			int z = 0;
			while (rs5.next()) {
				z++;
			}
			dataSet.setValue(">5", z);
			con.close();
		} catch (Exception e) {

		}
		JFreeChart chart = ChartFactory.createPieChart("Ilosc wystawionych ocen", dataSet, true, true, false);
		try {
			ChartUtilities.saveChartAsJPEG(new File("C:\\Users\\komputer\\Desktop\\chart.jpg"), chart, 500, 300);
		} catch (Exception e) {
			System.out.println("Problem occurred creating chart.");
		}
		return chart;
	}

	public static JFreeChart generateBarChart() {
		Connection con;
		double w, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12;
		Statement st, st2, st3, st4, st5, st6, st7, st8, st9, st10, st11, st12;
		PreparedStatement pst, pst2, pst3, pst4, pst5, pst6, pst7, pst8, pst9, pst10, pst11, pst12;
		DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
		try {
			Class.forName("com.mysql.jdbc.Driver"); // (1)
			con = DriverManager.getConnection(
					"jdbc:mysql://localhost/wariat?user=root&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"); // (2)

			st = con.createStatement();
			pst = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='1' AND PROFIL='a'");
			ResultSet rs = pst.executeQuery();
			w = 0;
			while (rs.next()) {
				w = rs.getDouble(1);
			}
			dataSet.setValue(w, "Srednia ocena", "1a");
			/////
			st2 = con.createStatement();
			pst2 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='1' AND PROFIL='b'");
			ResultSet rs2 = pst2.executeQuery();
			w2 = 0;
			while (rs2.next()) {
				w2 = rs2.getDouble(1);
			}
			dataSet.setValue(w2, "Srednia ocena", "1b");

			st3 = con.createStatement();
			pst3 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='1' AND PROFIL='c'");
			ResultSet rs3 = pst3.executeQuery();
			w3 = 0;
			while (rs3.next()) {
				w3 = rs3.getDouble(1);
			}
			dataSet.setValue(w3, "Srednia ocena", "1c");
			///////////////////////////////////////////////
			st4 = con.createStatement();
			pst4 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='1' AND PROFIL='d'");
			ResultSet rs4 = pst3.executeQuery();
			w4 = 0;
			while (rs4.next()) {
				w4 = rs4.getDouble(1);
			}
			dataSet.setValue(w4, "Srednia ocena", "1d");
			///////////////////////////////////////////////////////////////////
			st5 = con.createStatement();
			pst5 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='2' AND PROFIL='a'");
			ResultSet rs5 = pst5.executeQuery();
			w5 = 0;
			while (rs5.next()) {
				w5 = rs5.getDouble(1);
			}
			dataSet.setValue(w5, "Srednia ocena", "2a");
			////////////////////////////////////////////////////////////////////////////////
			st6 = con.createStatement();
			pst6 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='2' AND PROFIL='b'");
			ResultSet rs6 = pst6.executeQuery();
			w6 = 0;
			while (rs6.next()) {
				w6 = rs6.getDouble(1);
			}
			dataSet.setValue(w6, "Srednia ocena", "2b");
			///////////////////////////////////////////////////////////////////////
			st7 = con.createStatement();
			pst7 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='2' AND PROFIL='c'");
			ResultSet rs7 = pst7.executeQuery();
			w7 = 0;
			while (rs7.next()) {
				w7 = rs7.getDouble(1);
			}
			dataSet.setValue(w7, "Srednia ocena", "2c");
			///////////////////////////////////////////////////////////////////
			st8 = con.createStatement();
			pst8 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='2' AND PROFIL='d'");
			ResultSet rs8 = pst8.executeQuery();
			w8 = 0;
			while (rs8.next()) {
				w8 = rs8.getDouble(1);
			}
			dataSet.setValue(w8, "Srednia ocena", "2d");
			/////////////////////////////////////////////////////////////////////////
			st9 = con.createStatement();
			pst9 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='3' AND PROFIL='a'");
			ResultSet rs9 = pst9.executeQuery();
			w9 = 0;
			while (rs9.next()) {
				w9 = rs9.getDouble(1);
			}
			dataSet.setValue(w9, "Srednia ocena", "3a");
			///////////////////////////////////////////////////////////////////////////
			st10 = con.createStatement();
			pst10 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='3' AND PROFIL='b'");
			ResultSet rs10 = pst10.executeQuery();
			w10 = 0;
			while (rs10.next()) {
				w10 = rs10.getDouble(1);
			}
			dataSet.setValue(w10, "Srednia ocena", "3b");
			/////////////////////////////////////////////////////////////
			st11 = con.createStatement();
			pst11 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='3' AND PROFIL='c'");
			ResultSet rs11 = pst11.executeQuery();
			w11 = 0;
			while (rs11.next()) {
				w11 = rs11.getDouble(1);
			}
			dataSet.setValue(w11, "Srednia ocena", "3c");
			////////////////////////////////////////////////////////////////
			st12 = con.createStatement();
			pst12 = con.prepareStatement("select avg(OCENA_SREDNIA) from liceum where KLASA='3' AND PROFIL='d'");
			ResultSet rs12 = pst12.executeQuery();
			w12 = 0;
			while (rs12.next()) {
				w12 = rs12.getDouble(1);
			}
			dataSet.setValue(w12, "Srednia ocena", "3d");
			/////////////////////////////////////////////////////////////////
		} catch (Exception e) {

		}
		JFreeChart chart = ChartFactory.createBarChart("Srednia ocen dla kazdej klasy", "klasa",
				"Srednia ocen w klasie", dataSet, PlotOrientation.VERTICAL, false, true, false);

		return chart;
	}

	public static void writeChartToPDF(JFreeChart chart, int width, int height, String fileName) {
		PdfWriter writer = null;

		Document document2 = new Document();
		try {
			writer = PdfWriter.getInstance(document2, new FileOutputStream(fileName));
			document2.open();
			PdfContentByte contentByte = writer.getDirectContent();
			PdfTemplate template = contentByte.createTemplate(width, height);

			Graphics2D graphics2d = template.createGraphics(width, height, new DefaultFontMapper());

			Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, width, height);

			chart.draw(graphics2d, rectangle2d);

			graphics2d.dispose();
			contentByte.addTemplate(template, 0, 0);
			document2.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public boolean checkName(String name) {
		Pattern pattern = Pattern.compile("[A-Za-z]+");
		Matcher matcher = pattern.matcher(name);
		if (matcher.matches() == true) {
			System.out.println("imie/nazwisko wpisane poprawnie");
			return true;
		} else {
			System.out.println("iie/nazwisko sie nie zgadza!!!!!");
			return false;
		}
	}

	public boolean checkSrednia(String srednia) {
		Pattern pattern = Pattern.compile("[1-5]{1}\\.[0-9]{2}");
		Matcher matcher = pattern.matcher(srednia);
		if (matcher.matches() == true) {
			System.out.println("œrednia sie zgadza!\n");
			return true;
		} else {
			System.out.println("Œrednia sie nie zgadza!!!!!");
			return false;
		}
	}

	public boolean checkKlasa(String klasa) {
		Pattern pattern = Pattern.compile("^[1-3]{1}$");
		Matcher matcher = pattern.matcher(klasa);
		if (matcher.matches() == true) {
			System.out.println("klasa sie zgadza!\n");
			return true;
		} else {
			System.out.println("klasa sie nie zgadza!!!!!");
			return false;

		}
	}

	public boolean checkProfil(String profil) {
		Pattern pattern = Pattern.compile("^[a-d]{1}$");
		Matcher matcher = pattern.matcher(profil);
		if (matcher.matches() == true) {
			System.out.println("profil sie zgadza!\n");
			return true;
		} else {
			System.out.println("profil sie nie zgadza!!!!!");
			return false;

		}
	}

}
